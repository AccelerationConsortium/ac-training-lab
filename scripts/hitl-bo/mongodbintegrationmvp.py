# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# pip install ax-platform==0.4.3 numpy pymongo
import json
import os
import time
from datetime import datetime

import numpy as np
from ax.modelbridge.generation_strategy import GenerationStep, GenerationStrategy
from ax.modelbridge.registry import Models
from ax.service.ax_client import AxClient, ObjectiveProperties
from pymongo import MongoClient, errors

obj1_name = "branin"
MAX_TRIALS = 19  # Configuration constant

# Experiment identifier (separate from objective name) with hardcoded unique ID
experiment_id = f"{obj1_name}_experiment_k7m9"


def branin(x1, x2):
    """Branin function - a common benchmark for optimization."""
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )
    return y


# Connect to MongoDB
mongo_client = MongoClient(
    "mongodb://localhost:27017/", serverSelectionTimeoutMS=5000
)
# Test the connection
mongo_client.admin.command("ping")
db = mongo_client["ax_db"]
snapshots_col = db["ax_snapshots"]  # Collection for storing JSON snapshots
print("Connected to MongoDB successfully")

# Experiment configuration
parameters = [
    {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
    {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
]
objectives = {obj1_name: ObjectiveProperties(minimize=True)}


def save_ax_snapshot_to_mongodb(ax_client, experiment_name):
    """Save Ax client snapshot to MongoDB with timestamp (append, don't overwrite)."""
    try:
        # Insert document first to get unique ID
        snapshot_doc = {
            "experiment_name": experiment_name,
            "snapshot_data": {},  # Placeholder, will be updated
            "timestamp": datetime.now().isoformat(),
            "trial_count": (
                len(ax_client.get_trials_data_frame())
                if ax_client.get_trials_data_frame() is not None
                else 0
            ),
        }

        # Insert a new document for every snapshot (no overwrite)
        result = snapshots_col.insert_one(snapshot_doc)
        
        # Use database ID in temp filename to avoid conflicts
        temp_file = f"temp_{experiment_name}_{result.inserted_id}_snapshot.json"
        ax_client.save_to_json_file(temp_file)

        with open(temp_file, "r") as f:
            snapshot_data = json.load(f)

        # Update the document with actual snapshot data
        snapshots_col.update_one(
            {"_id": result.inserted_id},
            {"$set": {"snapshot_data": snapshot_data}}
        )

        os.remove(temp_file)

        print(f"Snapshot saved to MongoDB at {snapshot_doc['timestamp']} (ID: {result.inserted_id})")
        return result.inserted_id

    except Exception as e:
        print(f"Error saving snapshot: {e}")
        return None


def load_ax_snapshot_from_mongodb(experiment_name):
    """Load most recent Ax client snapshot from MongoDB."""
    try:
        # Find the most recent snapshot
        record = snapshots_col.find_one(
            {"experiment_name": experiment_name},
            sort=[("timestamp", -1)],  # Most recent first
        )

        if record:
            # Use database ID in temp filename to avoid conflicts
            temp_file = f"temp_{experiment_name}_{record['_id']}_snapshot.json"
            with open(temp_file, "w") as f:
                json.dump(record["snapshot_data"], f)

            # Load AxClient from file
            ax_client = AxClient.load_from_json_file(temp_file)

            # Clean up temp file
            os.remove(temp_file)

            print(
                f"Loaded snapshot from {record['timestamp']} with "
                f"{record['trial_count']} trials"
            )
            return ax_client
        else:
            print("No existing snapshot found")
            return None

    except Exception as e:
        print(f"Error loading snapshot: {e}")
        return None


# Load existing experiment or create new one
ax_client = load_ax_snapshot_from_mongodb(experiment_id)

if ax_client is None:
    # Create new experiment (Ax will use default generation strategy)
    ax_client = AxClient()
    ax_client.create_experiment(
        name=experiment_id, parameters=parameters, objectives=objectives
    )
    print("Created new experiment with default generation strategy")

    # Save initial snapshot
    save_ax_snapshot_to_mongodb(ax_client, experiment_id)
else:
    print("Resuming existing experiment")

# Get current trial count to determine how many more trials to run
current_trials = ax_client.get_trials_data_frame()
start_trial = len(current_trials) if current_trials is not None else 0

print(f"Starting optimization: running trials {start_trial} to {MAX_TRIALS-1}")

for i in range(start_trial, MAX_TRIALS):
    # Get next trial
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    print(f"Trial {trial_index}: x1={x1:.3f}, x2={x2:.3f}")
    
    # Add delay for manual testing - gives time to kill the process
    print("⏳ Starting trial evaluation in 3 seconds... (Press Ctrl+C to simulate kernel kill)")
    time.sleep(3)

    # Save snapshot before running experiment (preserves pending trial)
    save_ax_snapshot_to_mongodb(ax_client, experiment_id)

    # Evaluate objective function
    results = branin(x1, x2)

    # Format raw_data as expected by AxClient
    raw_data = {obj1_name: results}

    # Complete trial
    ax_client.complete_trial(trial_index=trial_index, raw_data=raw_data)

    # Save snapshot after completing trial
    save_ax_snapshot_to_mongodb(ax_client, experiment_id)

    # Get current best for progress tracking
    best_parameters, best_metrics = ax_client.get_best_parameters()
    best_value = best_metrics[0][obj1_name]
    print(
        f"Trial {trial_index}: result={results:.3f} | "
        f"Best so far: {best_value:.3f}"
    )
    
    # Add pause after trial completion for manual testing
    print("✅ Trial completed! Waiting 2 seconds before next trial... (Press Ctrl+C to test recovery)")
    time.sleep(2)
    print("=" * 50)

print("\nOptimization completed!")
best_parameters, best_metrics = ax_client.get_best_parameters()
print(f"Best parameters: {best_parameters}")
print(f"Best metrics: {best_metrics}")

save_ax_snapshot_to_mongodb(ax_client, experiment_id)

trials_df = ax_client.get_trials_data_frame()
if trials_df is not None:
    print(f"Total trials completed: {len(trials_df)}")
    print(f"Best objective value: {trials_df[obj1_name].min():.6f}")

mongo_client.close()
print("MongoDB connection closed")

print("\nTrials Summary:")
print(ax_client.get_trials_data_frame())